//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++
class Solution{
    public:
    void solve(int r,int c,vector<vector<int>> &m,int n,vector<string>&ans,string&s,vector<vector<int>>&visit)
    {
        if(r==n-1&&c==n-1)
        {
            ans.push_back(s);
            return;
        }
     // right move
     if(c+1<n&&m[r][c+1]==1&&visit[r][c+1]==0)
     {s.push_back('R');
     visit[r][c+1]=1;
      solve(r,c+1,m,n,ans,s,visit);
      s.pop_back();
      visit[r][c+1]=0;
     }
     //down move
     if(r+1<n&&m[r+1][c]==1&&!visit[r+1][c])
     {  visit[r+1][c]=1;
         s.push_back('D');
         solve(r+1,c,m,n,ans,s,visit);
         s.pop_back();
         visit[r+1][c]=0;
     }
     //left move
     if(c-1>=0&&m[r][c-1]==1&&!visit[r][c-1])
     {  visit[r][c-1]=1;
         s.push_back('L');
         solve(r,c-1,m,n,ans,s,visit);
         s.pop_back();
         visit[r][c-1]=0;
     }
     //upper move
      if(r-1>=0&&m[r-1][c]==1&&!visit[r-1][c])
     {   visit[r-1][c]=1;
         s.push_back('U');
         solve(r-1,c,m,n,ans,s,visit);
         s.pop_back();
         visit[r-1][c]=0;
     }
    }
    vector<string> findPath(vector<vector<int>> &m, int n)
    {   vector<vector<int>>visit(n,vector<int>(n,0));
        vector<string>ans;
        string s="";
          if(m[0][0]==0)
          return ans;
          visit[0][0]=1;
         solve(0,0,m,n,ans,s,visit);
         sort(ans.begin(),ans.end());
         return ans;
    }
};

    


//{ Driver Code Starts.



    


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
